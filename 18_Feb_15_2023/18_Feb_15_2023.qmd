


Text manipulation is an essential data cleaning skill,
You need it all the time for tasks like

- cleaning IDs before joining data sets
- removing or replacing superfluous words/letters
- combining or transforming sentences

Here are XXXXX examples and how to solve them with #rstats.



## Renaming long names

Load `tidyverse` and data from TidyTuesday.

```{r}
library(tidyverse)
big_tech_companies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-07/big_tech_companies.csv')
big_tech_companies
# # A tibble: 14 × 2
#    stock_symbol company                                  
#    <chr>        <chr>                                    
#  1 AAPL         Apple Inc.                               
#  2 ADBE         Adobe Inc.                               
#  3 AMZN         Amazon.com, Inc.                         
#  4 CRM          Salesforce, Inc.                         
#  5 CSCO         Cisco Systems, Inc.                      
#  6 GOOGL        Alphabet Inc.                            
#  7 IBM          International Business Machines Corporat…
#  8 INTC         Intel Corporation                        
#  9 META         Meta Platforms, Inc.                     
# 10 MSFT         Microsoft Corporation                    
# 11 NFLX         Netflix, Inc.                            
# 12 NVDA         NVIDIA Corporation                       
# 13 ORCL         Oracle Corporation                       
# 14 TSLA         Tesla, Inc.  
```

First, notice that IBM has a suuuuper long name.
We can rename just that name in the `company` column with `mutate()` and `if_else()`.


```{r}
big_tech_companies |> 
  mutate(
    company = if_else(
      stock_symbol == 'IBM',
      'IBM',
      company
    )
  )
# # A tibble: 14 × 2
#    stock_symbol company              
#    <chr>        <chr>                
#  1 AAPL         Apple Inc.           
#  2 ADBE         Adobe Inc.           
#  3 AMZN         Amazon.com, Inc.     
#  4 CRM          Salesforce, Inc.     
#  5 CSCO         Cisco Systems, Inc.  
#  6 GOOGL        Alphabet Inc.        
#  7 IBM          IBM                  
#  8 INTC         Intel Corporation    
#  9 META         Meta Platforms, Inc. 
# 10 MSFT         Microsoft Corporation
# 11 NFLX         Netflix, Inc.        
# 12 NVDA         NVIDIA Corporation   
# 13 ORCL         Oracle Corporation   
# 14 TSLA         Tesla, Inc.        
```

## Remove superfluous words

Now, let's get rid of words like "Platforms" or "Corporation".
Similarly, we can get rid of commas.
We can do all that that with `str_remove()`.

```{r}
big_tech_companies |> 
  mutate(
    company = if_else(
      stock_symbol == 'IBM',
      'IBM',
      company
    ),
    company = str_remove(
      company,
      # Put multiple things that need to be removed into parantheses and keep words apart with |
      '(Platforms|Corporation|,)'
    )
  )
# # A tibble: 14 × 2
#    stock_symbol company             
#    <chr>        <chr>               
#  1 AAPL         "Apple Inc."        
#  2 ADBE         "Adobe Inc."        
#  3 AMZN         "Amazon.com Inc."   
#  4 CRM          "Salesforce Inc."   
#  5 CSCO         "Cisco Systems Inc."
#  6 GOOGL        "Alphabet Inc."     
#  7 IBM          "IBM"               
#  8 INTC         "Intel "            
#  9 META         "Meta , Inc."       
# 10 MSFT         "Microsoft "        
# 11 NFLX         "Netflix Inc."      
# 12 NVDA         "NVIDIA "           
# 13 ORCL         "Oracle "           
# 14 TSLA         "Tesla Inc."  
```

Notice how this did not remove everything we wanted?
That's a good use case for `str_remove_all()`.
You want to get rid of all possible matches.

```{r}
big_tech_companies |> 
  mutate(
    company = if_else(
      stock_symbol == 'IBM',
      'IBM',
      company
    ),
    company = str_remove_all(
      company,
      '(Platforms|Corporation|,)'
    )
  )
# # A tibble: 14 × 2
#    stock_symbol company             
#    <chr>        <chr>               
#  1 AAPL         "Apple Inc."        
#  2 ADBE         "Adobe Inc."        
#  3 AMZN         "Amazon.com Inc."   
#  4 CRM          "Salesforce Inc."   
#  5 CSCO         "Cisco Systems Inc."
#  6 GOOGL        "Alphabet Inc."     
#  7 IBM          "IBM"               
#  8 INTC         "Intel "            
#  9 META         "Meta  Inc."        
# 10 MSFT         "Microsoft "        
# 11 NFLX         "Netflix Inc."      
# 12 NVDA         "NVIDIA "           
# 13 ORCL         "Oracle "           
# 14 TSLA         "Tesla Inc." 
```



## Remove words with special characters


```{r}
big_tech_companies |> 
  mutate(
    company = if_else(
      stock_symbol == 'IBM',
      'IBM',
      company
    ),
    company = str_remove_all(
      company,
      '(Platforms|Corporation|Inc\\.|\\.com|,)'
    )
  )
# # A tibble: 14 × 2
#    stock_symbol company         
#    <chr>        <chr>           
#  1 AAPL         "Apple "        
#  2 ADBE         "Adobe "        
#  3 AMZN         "Amazon "       
#  4 CRM          "Salesforce "   
#  5 CSCO         "Cisco Systems "
#  6 GOOGL        "Alphabet "     
#  7 IBM          "IBM"           
#  8 INTC         "Intel "        
#  9 META         "Meta  "        
# 10 MSFT         "Microsoft "    
# 11 NFLX         "Netflix "      
# 12 NVDA         "NVIDIA "       
# 13 ORCL         "Oracle "       
# 14 TSLA         "Tesla " 
```


## Remove trailing white space

Here, `str_trim()` will help you.

```{r}
big_tech_companies |> 
  mutate(
    company = if_else(
      stock_symbol == 'IBM',
      'IBM',
      company
    ),
    company = str_remove_all(
      company,
      '(Platforms|Corporation|Inc\\.|\\.com|,)'
    ),
    company = str_trim(company)
  )
# # A tibble: 14 × 2
#    stock_symbol company      
#    <chr>        <chr>        
#  1 AAPL         Apple        
#  2 ADBE         Adobe        
#  3 AMZN         Amazon       
#  4 CRM          Salesforce   
#  5 CSCO         Cisco Systems
#  6 GOOGL        Alphabet     
#  7 IBM          IBM          
#  8 INTC         Intel        
#  9 META         Meta         
# 10 MSFT         Microsoft    
# 11 NFLX         Netflix      
# 12 NVDA         NVIDIA       
# 13 ORCL         Oracle       
# 14 TSLA         Tesla     
```


## Read Economist data


```{r}
setwd(here::here('18_Feb_15_2023'))
tibble(
  # Manually copy and pasted data from PDF to a txt file
  input = read_lines('manual_2022.txt')
) 
# # A tibble: 167 × 1                                    
#    input                                           
#    <chr>                                           
#  1 Norway 9.81 1 0 10.00 9.64 10.00 10.00 9.41     
#  2 New Zealand 9.61 2 0 10.00 9.29 10.00 8.75 10.00
#  3 Iceland 9.52 3 2 10.00 9.64 8.89 9.38 9.71      
#  4 Sweden 9.39 4 0 9.58 9.64 8.33 10.00 9.41       
#  5 Finland 9.29 5 -2 10.00 9.64 8.33 8.75 9.71     
#  6 Denmark 9.28 6 0 10.00 9.29 8.33 9.38 9.41      
#  7 Switzerland 9.14 7 2 9.58 9.29 8.33 9.38 9.12   
#  8 Ireland 9.13 8 -1 10.00 8.21 8.33 10.00 9.12    
#  9 Netherlands 9.00 9 2 9.58 8.93 8.33 8.75 9.41   
# 10 Taiwan 8.99 10 -2 10.00 9.64 7.78 8.13 9.41     
# # … with 157 more rows
# # ℹ Use `print(n = ...)` to see more rows
```


## Read in first number


Grabs first number which luckily is the score


```{r}
tibble(
  input = read_lines('manual_2022.txt'),
  score = parse_number(input)
)
# Warning: 2 parsing failures.                           
# row col expected                                              actual
#  44  -- a number Timor-Leste 7.06 44 -1 9.58 5.93 5.56 6.88 7.35    
# 141  -- a number Guinea-Bissau 2.56 140= -2 4.00 0.00 3.33 3.13 2.35
# 
# # A tibble: 167 × 2
#    input                                            score
#    <chr>                                            <dbl>
#  1 Norway 9.81 1 0 10.00 9.64 10.00 10.00 9.41       9.81
#  2 New Zealand 9.61 2 0 10.00 9.29 10.00 8.75 10.00  9.61
#  3 Iceland 9.52 3 2 10.00 9.64 8.89 9.38 9.71        9.52
#  4 Sweden 9.39 4 0 9.58 9.64 8.33 10.00 9.41         9.39
#  5 Finland 9.29 5 -2 10.00 9.64 8.33 8.75 9.71       9.29
#  6 Denmark 9.28 6 0 10.00 9.29 8.33 9.38 9.41        9.28
#  7 Switzerland 9.14 7 2 9.58 9.29 8.33 9.38 9.12     9.14
#  8 Ireland 9.13 8 -1 10.00 8.21 8.33 10.00 9.12      9.13
#  9 Netherlands 9.00 9 2 9.58 8.93 8.33 8.75 9.41     9   
# 10 Taiwan 8.99 10 -2 10.00 9.64 7.78 8.13 9.41       8.99
# # … with 157 more rows
# # ℹ Use `print(n = ...)` to see more rows
```


Oh no there were parsing errors.
It seems that errors occurred for two countries that suspiciously had a minus in their name.


## Replace those annoying minuses

Let's just replace those minuses with a white space before using `parse_number()`.
We can do that safely here because we extract the first number anyway and this number can't be negative.


```{r}
tibble(
  input = read_lines('manual_2022.txt'),
  # replace - with white space
  input_wo_minus = str_replace(input, '-', ' '),
  score = parse_number(input_wo_minus)
) |> 
  select(-input_wo_minus)
# # A tibble: 167 × 2                                    
#    input                                            score
#    <chr>                                            <dbl>
#  1 Norway 9.81 1 0 10.00 9.64 10.00 10.00 9.41       9.81
#  2 New Zealand 9.61 2 0 10.00 9.29 10.00 8.75 10.00  9.61
#  3 Iceland 9.52 3 2 10.00 9.64 8.89 9.38 9.71        9.52
#  4 Sweden 9.39 4 0 9.58 9.64 8.33 10.00 9.41         9.39
#  5 Finland 9.29 5 -2 10.00 9.64 8.33 8.75 9.71       9.29
#  6 Denmark 9.28 6 0 10.00 9.29 8.33 9.38 9.41        9.28
#  7 Switzerland 9.14 7 2 9.58 9.29 8.33 9.38 9.12     9.14
#  8 Ireland 9.13 8 -1 10.00 8.21 8.33 10.00 9.12      9.13
#  9 Netherlands 9.00 9 2 9.58 8.93 8.33 8.75 9.41     9   
# 10 Taiwan 8.99 10 -2 10.00 9.64 7.78 8.13 9.41       8.99
# # … with 157 more rows
# # ℹ Use `print(n = ...)` to see more rows
```

Yay, no parsing errors.
