

Quick recap from last week.
We were in the midst of building this habit tracker app with Shiny.
Our goal was to learn how to align content with HTML and CSS.
Last time, we stopped after centering the name of the habit.

```{r}
library(shiny)
ui <- fluidPage(
  theme = bslib::bs_theme(bootswatch = 'minty'),
  navbarPage(
    'Habit Tracker',
    tabPanel(
      'January',
      div(
        style = 'width: 1000px; overflow-x: scroll; scrollbar-width: thin;',
        div(
          style = 'display: flex; background-color:#e5e5e5',
          div(
            # Add auto-margins and padding 
            # Also changed to css() for cleaner code
            style = htmltools::css(
              min_width = '125px', 
              padding_left = '20px', 
              margin_top = 'auto',
              margin_bottom =  'auto'
            ),
            'Habit Name'
          ),
          div(
            style = htmltools::css(
              display = 'flex', 
              background_color = '#e5e5e5',
              padding_top = '5px',
              padding_bottom = '5px'
            ),
            purrr::map(1:31, \(x) checkboxInput(
              # unique id for each day
              paste0('checkbox', x), '', 
              width = '50px')
            )
          )
        )
      )
    ),
    !!!purrr::map(month.name[-1], \(x) tabPanel(x))
  )
)
```

We created this app using flexboxes and setting `margin-top` and `margin-bottom` to `auto`.
We can do the same thing to align the checkboxes properly.
But this requires inserting CSS into the right places.

The problem with that is that Shiny generates the HTML code for us, so we have to overwrite the CSS that Shiny uses internally.
We do this by inserting our own style for the corresponding CSS classes into our app.
As is often the case, the trick is to find the correct class name that we need to target.
This can only be done by strolling through the HTML code of the app with your web browser.

And it gets a little worse.
The checkboxes are nested into other containers that Shiny creates.
And these containers have classes of their own. of other classes
This means that we have to find multiple class names to

1.  enable flexbox display in the surrounding divs (in order to enable auto-margins)

2.  change widths, height and margin of the checkbox (width and height optional but looks better)

Once we've found these class names we can insert their new CSS code with `tags$style()`.

```{r}
ui <- fluidPage(
  theme = bslib::bs_theme(bootswatch = 'minty'),
  tags$style(
    '.form-check-input[type="checkbox"], .shiny-input-container .checkbox input[type="checkbox"], .shiny-input-container .checkbox-inline input[type="checkbox"], .shiny-input-container .radio input[type="checkbox"], .shiny-input-container .radio-inline input[type="checkbox"] {
    width:40px; height: 40px; margin: auto;}
    
    .form-check, .shiny-input-container .checkbox, .shiny-input-container .radio {
      margin: auto;
    }
    
    .shiny-input-container:not(.shiny-input-container-inline) {
      margin: auto; 
      display: flex;
    }'
  ),
  navbarPage(
    'Habit Tracker',
    tabPanel(
      'January',
      div(
        style = 'width: 1000px; overflow-x: scroll; scrollbar-width: thin;',
        div(
          style = 'display: flex; background-color:#e5e5e5',
          div(
            # Add auto-margins and padding 
            # Also changed to css() for cleaner code
            style = htmltools::css(
              min_width = '125px', 
              padding_left = '20px', 
              margin_top = 'auto',
              margin_bottom =  'auto'
            ),
            'Habit Name'
          ),
          div(
            style = htmltools::css(
              display = 'flex', 
              background_color = '#e5e5e5',
              padding_top = '5px',
              padding_bottom = '5px'
            ),
            purrr::map(1:31, \(x) checkboxInput(
              # unique id for each day
              paste0('checkbox', x), '', 
              width = '50px')
            )
          )
        )
      )
    ),
    !!!purrr::map(month.name[-1], \(x) tabPanel(x))
  )
)
```

Excellent!
This looks great.
Now onto the finishing touches.

First, we take the code for one habit row and wrap it into a Shiny module.
This way, we can scale our app to track more than just one habit without having to copy and paste code.
Copy-and-pasting is really bad (LINK TO AVOID DUPLICATE CODE). 
Especially in Shiny.
Hence, the module.
(If you're not familiar with modules yet, no worries, I got you covered..


```{r}
habit_rowUI <- function(id, habit, even = FALSE) {
  # "even" will handle the background color (nicer UI)
  ns <- NS(id)
  background_color <- if (even) '#e5e5e5' else 'white'
  tagList(
    div(
      style = htmltools::css(
        display = 'flex',
        background_color = background_color,
      ),
      div(
        # Add auto-margins and padding 
        # Also changed to css() for cleaner code
        style = htmltools::css(
          min_width = '125px', 
          padding_left = '20px', 
          margin_top = 'auto',
          margin_bottom =  'auto'
        ),
        habit
      ),
      div(
        style = htmltools::css(
          display = 'flex', 
          background_color = background_color,
          padding_top = '5px',
          padding_bottom = '5px'
        ),
        purrr::map(1:31, \(x) checkboxInput(
            # unique id for each day
            ns(paste0('checkbox', x)), '', 
            width = '50px'
          )
        )
      )
    )
  )
}

habit_rowServer <- function(id) {
  moduleServer(
    id,
    function(input, output, session) {
      
    }
  )
}
```


And once we have refactored the code logic into modules we can easily add more habits.

```{r}
ui <- fluidPage(
  theme = bslib::bs_theme(bootswatch = 'minty'),
  tags$style(
    '.form-check-input[type="checkbox"], .shiny-input-container .checkbox input[type="checkbox"], .shiny-input-container .checkbox-inline input[type="checkbox"], .shiny-input-container .radio input[type="checkbox"], .shiny-input-container .radio-inline input[type="checkbox"] {
    width:40px; height: 40px; margin: auto;}
    
    .form-check, .shiny-input-container .checkbox, .shiny-input-container .radio {
      margin: auto;
    }
    
    .shiny-input-container:not(.shiny-input-container-inline) {
      margin: auto; 
      display: flex;
    }'
  ),
  navbarPage(
    'Habit Tracker',
    tabPanel(
      'January',
      div(
        style = 'width: 1000px; overflow-x: scroll; scrollbar-width: thin;',
        # We start with even because we will add numbers above that
        habit_rowUI('meditation', 'Meditation', even = TRUE),
        habit_rowUI('running', 'Running'),
        habit_rowUI('naps', 'Take Naps', even = TRUE),
        habit_rowUI('phd_stuff', 'Do PhD Stuff'),
        habit_rowUI('weird_habit', 'Weird habit', even = TRUE),
      )
    ),
    !!!purrr::map(month.name[-1], \(x) tabPanel(x))
  )
)
```

Finally, we just have to add the numbers 1 to 31 on top of the habit rows.
For horizontally aligning the numbers, we can wrap the them into a div of the same width as the checkboxes and set `text-align:center;`

```{r}
ui <- fluidPage(
  theme = bslib::bs_theme(bootswatch = 'minty'),
  tags$style(
    '.form-check-input[type="checkbox"], .shiny-input-container .checkbox input[type="checkbox"], .shiny-input-container .checkbox-inline input[type="checkbox"], .shiny-input-container .radio input[type="checkbox"], .shiny-input-container .radio-inline input[type="checkbox"] {
    width:40px; height: 40px; margin: auto;}
    
    .form-check, .shiny-input-container .checkbox, .shiny-input-container .radio {
      margin: auto;
    }
    
    .shiny-input-container:not(.shiny-input-container-inline) {
      margin: auto; 
      display: flex;
    }'
  ),
  navbarPage(
    'Habit Tracker',
    tabPanel(
      'January',
      div(
        style = 'width: 1000px; overflow-x: scroll; scrollbar-width: thin;',
        
        div(
          style = 'display: flex',
          div(
            style = 'min-width:125px;',
            ''
          ),
          div(
            style = 'display: flex;',
            purrr::map(1:31, \(x) div(
              style = 'width:50px; text-align: center; font-weight:500;', 
              x)
            )
          )
        ),
        habit_rowUI('meditation', 'Meditation', even = TRUE),
        habit_rowUI('running', 'Running'),
        habit_rowUI('naps', 'Take Naps', even = TRUE),
        habit_rowUI('phd_stuff', 'Do PhD Stuff'),
        habit_rowUI('weird_habit', 'Weird habit', even = TRUE),
      )
    ),
    !!!purrr::map(month.name[-1], \(x) tabPanel(x))
  )
)
```



```{r}
server <- function(input, output, session) {
  
}

shinyApp(ui, server)
```
